6.4 Bash Conditional Expressions

Conditional expressions are used by the [[ compound command and the test and [ builtin commands.

Expressions may be unary or binary. Unary expressions are often used to examine the status of a file. There are string operators and numeric comparison operators as well. If the file argument to one of the primaries is of the form /dev/fd/N, then file descriptor N is checked. If the file argument to one of the primaries is one of /dev/stdin, /dev/stdout, or /dev/stderr, file descriptor 0, 1, or 2, respectively, is checked.

When used with [[, the ‘<’ and ‘>’ operators sort lexicographically using the current locale. The test command uses ASCII ordering.

Unless otherwise specified, primaries that operate on files follow symbolic links and operate on the target of the link, rather than the link itself.

-a file

    True if file exists.
-b file

    True if file exists and is a block special file.
-c file

    True if file exists and is a character special file.
-d file

    True if file exists and is a directory.
-e file

    True if file exists.
-f file

    True if file exists and is a regular file.
-g file

    True if file exists and its set-group-id bit is set.
-h file

    True if file exists and is a symbolic link.
-k file

    True if file exists and its "sticky" bit is set.
-p file

    True if file exists and is a named pipe (FIFO).
-r file

    True if file exists and is readable.
-s file

    True if file exists and has a size greater than zero.
-t fd

    True if file descriptor fd is open and refers to a terminal.
-u file

    True if file exists and its set-user-id bit is set.
-w file

    True if file exists and is writable.
-x file

    True if file exists and is executable.
-G file

    True if file exists and is owned by the effective group id.
-L file

    True if file exists and is a symbolic link.
-N file

    True if file exists and has been modified since it was last read.
-O file

    True if file exists and is owned by the effective user id.
-S file

    True if file exists and is a socket.
file1 -ef file2

    True if file1 and file2 refer to the same device and inode numbers.
file1 -nt file2

    True if file1 is newer (according to modification date) than file2, or if file1 exists and file2 does not.
file1 -ot file2

    True if file1 is older than file2, or if file2 exists and file1 does not.
-o optname

    True if the shell option optname is enabled. The list of options appears in the description of the -o option to the set builtin (see The Set Builtin).
-v varname

    True if the shell variable varname is set (has been assigned a value).
-R varname

    True if the shell variable varname is set and is a name reference.
-z string

    True if the length of string is zero.
-n string
string

    True if the length of string is non-zero.
string1 == string2
string1 = string2

    True if the strings are equal. When used with the [[ command, this performs pattern matching as described above (see Conditional Constructs).

    ‘=’ should be used with the test command for POSIX conformance.
string1 != string2

    True if the strings are not equal.
string1 < string2

    True if string1 sorts before string2 lexicographically.
string1 > string2

    True if string1 sorts after string2 lexicographically.
arg1 OP arg2

    OP is one of ‘-eq’, ‘-ne’, ‘-lt’, ‘-le’, ‘-gt’, or ‘-ge’. These arithmetic binary operators return true if arg1 is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to arg2, respectively. Arg1 and arg2 may be positive or negative integers. 

Next: Aliases, Previous: Bash Conditional Expressions, Up: Bash Features   [Contents][Index]
6.5 Shell Arithmetic

The shell allows arithmetic expressions to be evaluated, as one of the shell expansions or by the let and the -i option to the declare builtins.

Evaluation is done in fixed-width integers with no check for overflow, though division by 0 is trapped and flagged as an error. The operators and their precedence, associativity, and values are the same as in the C language. The following list of operators is grouped into levels of equal-precedence operators. The levels are listed in order of decreasing precedence.

id++ id--

    variable post-increment and post-decrement
++id --id

    variable pre-increment and pre-decrement
- +

    unary minus and plus
! ~

    logical and bitwise negation
**

    exponentiation
* / %

    multiplication, division, remainder
+ -

    addition, subtraction
<< >>

    left and right bitwise shifts
<= >= < >

    comparison
== !=

    equality and inequality
&

    bitwise AND
^

    bitwise exclusive OR
|

    bitwise OR
&&

    logical AND
||

    logical OR
expr ? expr : expr

    conditional operator
= *= /= %= += -= <<= >>= &= ^= |=

    assignment
expr1 , expr2

    comma 

Shell variables are allowed as operands; parameter expansion is performed before the expression is evaluated. Within an expression, shell variables may also be referenced by name without using the parameter expansion syntax. A shell variable that is null or unset evaluates to 0 when referenced by name without using the parameter expansion syntax. The value of a variable is evaluated as an arithmetic expression when it is referenced, or when a variable which has been given the integer attribute using ‘declare -i’ is assigned a value. A null value evaluates to 0. A shell variable need not have its integer attribute turned on to be used in an expression.

Constants with a leading 0 are interpreted as octal numbers. A leading ‘0x’ or ‘0X’ denotes hexadecimal. Otherwise, numbers take the form [base#]n, where the optional base is a decimal number between 2 and 64 representing the arithmetic base, and n is a number in that base. If base# is omitted, then base 10 is used. When specifying n, he digits greater than 9 are represented by the lowercase letters, the uppercase letters, ‘@’, and ‘_’, in that order. If base is less than or equal to 36, lowercase and uppercase letters may be used interchangeably to represent numbers between 10 and 35.

Operators are evaluated in order of precedence. Sub-expressions in parentheses are evaluated first and may override the precedence rules above.

